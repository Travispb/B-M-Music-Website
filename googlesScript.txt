// The email address that should receive the form submissions and reports.
// To add more recipients, separate emails with a comma.
const RECIPIENT_EMAIL = "travisbirkhoff@gmail.com";

// This name MUST EXACTLY MATCH the name of the tab in your Google Sheet.
const SHEET_NAME = "Sheet1";

// Set to 'true' if you want the sheet to be cleared after the analytics report is sent.
const CLEAR_SHEET_AFTER_SENDING = false;


// Handles the real-time form submission from your website.
function doPost(e) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
    if (!sheet) {
      throw new Error("Sheet '" + SHEET_NAME + "' not found. Please check the SHEET_NAME variable in the script.");
    }
    const data = e.parameter;
    const timestamp = new Date();

    const newRow = [
      timestamp, data['first-name'] || '', data['last-name'] || '', data.phone || '',
      data.email || '', data.instrument || '', data.experience || '', data['preferred-day'] || '',
      data['preferred-teacher'] || '', data.location || '', data['hear-about-us'] || '', data.message || ''
    ];

    sheet.appendRow(newRow);
    sendEmailNotification(data);

    return ContentService
      .createTextOutput(JSON.stringify({ "result": "success" }))
      .setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    Logger.log(error.toString());
    return ContentService
      .createTextOutput(JSON.stringify({ "result": "error", "error": error.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

// Sends the instant email notification for a single submission.
function sendEmailNotification(formData) {
  let subject = "New Trial Lesson Request from " + formData['first-name'] + " " + formData['last-name'];
  let body = "A new trial lesson request has been submitted through the website.\n\n--- Details ---\n\n";
  body += "First Name: " + (formData['first-name'] || 'N/A') + "\n";
  body += "Last Name: " + (formData['last-name'] || 'N/A') + "\n";
  body += "Phone: " + (formData.phone || 'N/A') + "\n";
  body += "Email: " + (formData.email || 'N/A') + "\n\n";
  body += "Instrument: " + (formData.instrument || 'N/A') + "\n";
  body += "Musical Background: " + (formData.experience || 'N/A') + "\n";
  body += "Preferred Day: " + (formData['preferred-day'] || 'N/A') + "\n";
  body += "Preferred Teacher: " + (formData['preferred-teacher'] || 'N/A') + "\n";
  body += "Location: " + (formData.location || 'N/A') + "\n\n";
  body += "How they heard about us: " + (formData['hear-about-us'] || 'N/A') + "\n";
  body += "Message:\n" + (formData.message || 'N/A') + "\n";

  MailApp.sendEmail(RECIPIENT_EMAIL, subject, body);
}


// --- NEW ANALYTICS SUMMARY FUNCTION ---
function sendAnalyticsReport() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(SHEET_NAME);
  const data = sheet.getDataRange().getValues();

  if (data.length <= 1) {
    Logger.log("No new submissions to report.");
    return;
  }

  const headers = data.shift(); // Remove header row

  // Find column indexes to make the script robust
  const instrumentColIndex = headers.indexOf('instrument');
  const referralColIndex = headers.indexOf('hear-about-us');

  const totalSubmissions = data.length;
  const instrumentCounts = {};
  const referralCounts = {};

  // Loop through the data to calculate stats
  data.forEach(row => {
    const instrument = row[instrumentColIndex] || "Not Specified";
    instrumentCounts[instrument] = (instrumentCounts[instrument] || 0) + 1;

    const referral = row[referralColIndex] || "Not Specified";
    referralCounts[referral] = (referralCounts[referral] || 0) + 1;
  });

  // Build the HTML for the email
  let htmlBody = `
    <html>
      <head>
        <style>
          body { font-family: sans-serif; margin: 20px; color: #333; }
          h2 { color: #1a1a1a; }
          .card { border: 1px solid #ddd; border-radius: 8px; padding: 20px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
          .stat { font-size: 2.5em; font-weight: bold; color: #d2b48c; }
          table { border-collapse: collapse; width: 100%; margin-top: 15px; }
          th, td { text-align: left; padding: 12px; border-bottom: 1px solid #ddd; }
          th { background-color: #f7f7f7; }
        </style>
      </head>
      <body>
        <h2>B&M Website Analytics Summary</h2>
        
        <div class="card">
          <h3>Total New Inquiries</h3>
          <p class="stat">${totalSubmissions}</p>
        </div>

        <div class="card">
          <h3>Instrument Interest</h3>
          <table>
            <tr><th>Instrument</th><th>Inquiries</th></tr>
            ${Object.entries(instrumentCounts).map(([instrument, count]) => `<tr><td>${instrument}</td><td>${count}</td></tr>`).join('')}
          </table>
        </div>

        <div class="card">
          <h3>Referral Sources</h3>
          <table>
            <tr><th>Source</th><th>Count</th><th>Percentage</th></tr>
            ${Object.entries(referralCounts).map(([source, count]) => {
              const percentage = ((count / totalSubmissions) * 100).toFixed(1);
              return `<tr><td>${source}</td><td>${count}</td><td>${percentage}%</td></tr>`;
            }).join('')}
          </table>
        </div>
      </body>
    </html>
  `;

  const subject = "Website Analytics Report - " + new Date().toLocaleDateString();

  MailApp.sendEmail({
    to: RECIPIENT_EMAIL,
    subject: subject,
    htmlBody: htmlBody
  });

  if (CLEAR_SHEET_AFTER_SENDING) {
    sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).clearContent();
  }
}

